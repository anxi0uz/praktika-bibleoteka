// <auto-generated />
using ApiBookStore.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiBookStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250422081715_fadeeva")]
    partial class fadeeva
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiBookStore.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fio");

                    b.Property<int?>("IdBook")
                        .HasColumnType("int")
                        .HasColumnName("idBook");

                    b.HasKey("Id");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("ApiBookStore.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("authorId");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genreId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<string>("PublishDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("publishDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("ApiBookStore.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("ApiBookStore.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ApiBookStore.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DatePost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("datePost");

                    b.Property<string>("DateReceived")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dateReceived");

                    b.Property<int>("IdBook")
                        .HasColumnType("int")
                        .HasColumnName("idBook");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("TickerNumber")
                        .HasColumnType("int")
                        .HasColumnName("tickerNumber");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdUser");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("ApiBookStore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("adress");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("birthDate");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fio");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("phonenumber");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApiBookStore.Models.Book", b =>
                {
                    b.HasOne("ApiBookStore.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Author");

                    b.HasOne("ApiBookStore.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Genre");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ApiBookStore.Models.Ticket", b =>
                {
                    b.HasOne("ApiBookStore.Models.Book", "IdBookNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Book");

                    b.HasOne("ApiBookStore.Models.User", "IdUserNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Users");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ApiBookStore.Models.User", b =>
                {
                    b.HasOne("ApiBookStore.Models.Role", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("ApiBookStore.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ApiBookStore.Models.Book", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ApiBookStore.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ApiBookStore.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ApiBookStore.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
